@startuml

NPCPF2e *- NPCActor : Pulls from Foundry >
NPCActor *.. KnowledgeRecalledActor : implements  >
KnowledgeRecalledActor --^ NPCActor : Request Updates from (NPCActor) >

node "Types" {
object PrivateInfo
object BaseCharacterInfo
object Rarity
object ArmorClass
object DCAdjustments

JournalNotes *-- GMNotes
JournalNotes *-- PlayerNote
JournalNotes *-- GMNotesToPlayers

Traits *-- Trait

LowestSave *-u- FortitudeSave
LowestSave *-u- ReflexSave
LowestSave *-u- WillSave
Weaknesses *-- DmgType
Resistances *-- DmgType
Immunities *-- DmgType
Abilities *-- Ability
Attacks *-- Attack
PassiveAbilities *-- PassiveAbility

Spells *-- Spell



}

object NPCPF2e{
    +FoundryData: object
}
class NPCActor {
      constructor(NPCPF2e)
      - PrivateInfo: PrivateInfo
      + BaseCharacterInfo: BaseCharacterInfo
      + Rarity: Rarity
      + Traits: Traits
      + ArmorClass: ArmorClass
      + FortitudeSave: FortitudeSave
      + ReflexSave: ReflexSave
      + WillSave: WillSave
      + LowestSave: LowestSave
      + Immunities: Immunities
      + Resistances: Resistances
      + Weaknesses: Weaknesses
      + Abilities: Abilities
      + Attacks: Attacks
      + PassiveAbilities: PassiveAbilities
      + Spells: Spells
      --
      + getLowestSave()
      + getTraits()
      + getBaseCharacterInfo()
      + getPrivateInfo()
      + getRarity()
      + getArmorClass()
      + getFortitudeSave()
      + getReflexSave()
      + getWillSave()
      + getImmunities()
      + getLowestSave()
      + getResistances()
      + getWeaknesses()
      + getAbilities()
      + getAttacks()
      + getPassiveAbilities()
      + getSpells()
}

class KnowledgeRecalledActor {
   + DifficultyAdjustment: Array<DCAdjustments>
   + JournalNotes: JournalNotes

   constructor(NPCActor)
   + createActor(NPCActor)
   + updateData(NPCActor)
   + getData(self)
   + setData(self)
   + await changes()
   + updateDifficultyAdjustment()
   + getDifficultyAdjustment()
}

object PrivateInfo {
   - privateDescription: String
   - CR: Number
   + visibility: Boolean
}
object BaseCharacterInfo {
   + name: String
   + actorImg: String
   + description: String
   + visibility: Boolean
}
object Rarity {
   + value: String
   + visibility: Boolean
}
object Traits {
   + trait: Array<Trait>
   + beforeDC: Number
   + afterDC: Number
}

object ArmorClass {
   +value: Number
   +visibility: Boolean
   +beforeDC: Number
   +afterDC: Number
}
object FortitudeSave {
   +value: Number
   +visibility: Boolean
   +beforeDC: Number
   +afterDC: Number
}
object ReflexSave {
   +value: Number
   +visibility: Boolean
   +beforeDC: Number
   +afterDC: Number
}
object WillSave {
   +value: Number
   +visibility: Boolean
   +beforeDC: Number
   +afterDC: Number
}
object LowestSave {
   +value: ReflexSave || FortitudeSave || WillSave
   +visibility: Boolean
   +beforeDC: Number
   +afterDC: Number
}


object Immunities {
   +value: Array<DmgType>
}
object Resistances {
   +value: Array<DmgType>
}
object Weaknesses {
   +value: Array<DmgType>
}


object Abilities {
   +value: Array<Ability>
   +beforeDC: Number
   +afterDC: Number
}


object Attacks {
   +value: Array<Attack>
   +beforeDC: Number
   +afterDC: Number
}

object PassiveAbilities {
   +value: Array<PassiveAbility>
   +beforeDC: Number
   +afterDC: Number
}


object Spells {
   +value: Array<Spell>
   +beforeDC: Number
   +afterDC: Number
}

object JournalNotes {
   +GMNotes: Object
   +PlayerNotes: Array<PlayerNote>
   +GMNotesToPlayers: Object
}


object Trait {
   + trait: String
   + visibility: Boolean
}
object DmgType {
   +value: String
   +visibility: Boolean
}
object Ability {
   +name: String
   +Description: String
   +visibility: Boolean
}
object Attack {
   +name: String
   +Description: String
   +visibility: Boolean
}
object PassiveAbility {
   +name: String
   +Description: String
   +visibility: Boolean
}
object Spell {
   +name: String
   +Description: String
   +visibility: Boolean
}
object DCAdjustments {
   adjustment: String
   playerID: String
}
object GMNotes {
   +notes: String
   +visibility: Boolean
}
object PlayerNote {
   +playerID: String
   +notes: String
}
object GMNotesToPlayers {
   +notes: String
   +visibility: Boolean
}

@enduml